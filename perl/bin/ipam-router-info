#!/usr/bin/perl
####
#### File name:     ipam-router-info
#### Description:   Extract router/interface for subnets in the IPAM
#### Author:        Alexander Gall <gall@switch.ch>
#### Created:       Jan 10 2013
####
#### This command works as a filter for the output of "getciscoaddr
#### --networks" to display the router configurations for particular
#### IP prefixes.  IP prefixes can either be supplied directly as
#### arguments to ipam-router-info or indirectly through domain names.
#### Literal prefixes are looked up in the IPAM address map.
####
#### A domain name is first looked up in the IPAM registry for IP
#### subnets.  If a match is found, the router configuration for each
#### prefix associated with the subnet is displayed.  If no match is
#### found, the domain name is looked up in the address map and the
#### router configuration for all matching prefixes is displayed.  If
#### a domain name is neither a subnet nor a prefix known to the IPAM,
#### the name is skipped and a warning is issued.
####

## Local Variables:
## mode: CPerl
## End:

my $base_dir;
BEGIN {
  $base_dir = '/home/noc/IPAM';
  if (exists $ENV{IPAM_BASE}) {
    $base_dir = $ENV{IPAM_BASE};
  }
}
use strict;
use warnings;
use lib "$base_dir/lib/perl5";
use IPAM 0.01;
use Getopt::Long;

my %networks;
my $indent_unit = 2;

my %opt = ( 'default-domain' => 'switch.ch.');
sub router_info($$);
sub indent($$);

sub usage() {
  print <<"EOF";
usage: $0 <subnet> | <network> | <literal-prefix> ...
EOF
exit(1);
}

GetOptions(\%opt, 'default-domain=s') or usage();
$opt{'default-domain'} =~ /\.$/ or
  die "The default domain must end with a dot.\n";
@ARGV or usage();
system("cd $base_dir && make --no-print-directory --silent cache-maybe-rebuild") == 0 or die;
my $ipam = IPAM->new_from_cache("$base_dir/.ipam.cache");

while (<STDIN>) {
  chomp;
  my ($router, $interface, $prefix, $address, $description, $state) = split('%');
  my $ip = NetAddr::IP->new($prefix) or
    die "Malformed prefix: $prefix";
  my $ip_addr = NetAddr::IP->new($address) or
    die "Malformed address: $address";
  my $cidr = $ip->cidr();
  $networks{$cidr}{ip} = $ip;
  push(@{$networks{$cidr}{interfaces}}, { name => $interface,
                                          router => $router,
                                          addr => $ip_addr,
                                          desc => $description,
                                          state => $state, });
}

foreach my $item (@ARGV) {
  if ($item =~ /(\d+\.\d+\.\d+\.\d+|:|\/)/) {
    my ($ip, $prefix);
    $ip = NetAddr::IP->new($item) or die "Malformed prefix $item";
    unless ($prefix = $ipam->address_map()->lookup_by_ip($ip)) {
      warn "Unknown prefix $item\n";
      next;
    }
    print $prefix->ip()->cidr()."\n";
    indent(1, "Name: ".$prefix->id()."\n");
    router_info($prefix, 1);
  } else {
    unless ($item =~ /\.$/) {
      $item .= '.';
      unless ($item =~ /(\.|^)$opt{'default-domain'}$/) {
        $item .= $opt{'default-domain'};
      }
    }
    my ($network, @prefixes);
    if ($network = $ipam->registry(IPAM::REG_NETWORK)->lookup($item)) {
      @prefixes = $network->prefixes(sub { $_[0]->ip() <=> $_[1]->ip(); });
    } else {
      unless (@prefixes = $ipam->address_map()->lookup_by_id($item)) {
        warn "Unknown prefix or subnet $item";
        next;
      }
    }
    print "$item\n";
    foreach my $prefix (@prefixes) {
      indent(1, "Prefix: ".$prefix->ip()->cidr()."\n");
      router_info($prefix, 2);
    }
  }
}

sub router_info($$) {
  my ($prefix, $indent) = @_;
  my $cidr = $prefix->ip()->cidr();
  if (exists $networks{$cidr}) {
    foreach my $if (@{$networks{$cidr}{interfaces}}) {
      indent($indent, "Router: ".$if->{router}."\n");
      indent($indent+1, "Interface: ".$if->{name}."\n");
      indent($indent+1, "Admin state: ".$if->{state}."\n");
      $if->{desc} and indent($indent+1, "Description: ".$if->{desc}."\n");
    }
  } else {
    indent($indent, "Not configured on any router\n");
  }
}

sub indent($$) {
  my ($level, $msg) = @_;
  print ' 'x($level*$indent_unit).$msg;
}
