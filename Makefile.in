export IPAM_BASE = @@IPAM_BASE@@

PATH = /bin:/usr/bin:$(IPAM_BASE)/bin

JING = java -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration -jar /usr/share/java/jing.jar
FIND = find
GEN-ZONES = ipam-gen-zones
SERIALIZE = ipam-create-cache
DUMP = xmllint --xinclude
DIFF = diff

define FIND_XML_FILES
	$(filter-out %/schemas.xml, $(shell $(FIND) $(1) -type f -name "*.xml"))
endef

### Directories and files that contain <networks> tags.
### Used as prerequisites for validate and construction
### of automatic includes.
NETWORKS_DIRS := $(wildcard networks net-*/networks)
NETWORKS_FILES := $(call FIND_XML_FILES,$(NETWORKS_DIRS))
### Directories and files that contain parts of the
### address map.  Used as prerequisites for validate.
BLOCKS_DIRS := $(wildcard net-*/blocks-*)
BLOCKS_FILES := $(call FIND_XML_FILES,$(BLOCKS_DIRS))

.DEFAULT_GOAL = zones

### Validate ipam.xml aginst the schema.  It appears that only James Clark
### is able to write a working RelaxNG vlaidator :(  The validator based on
### libxml2 is buggy, which makes XML::LibXML::RelaxNG unusable as well.
### For now, we perform validation outside of the IPAM Perl module using
### jing.
validate: .networks-auto-include ipam.xml alternatives.xml address-map.xml iid.xml zones.xml $(NETWORKS_FILES) $(BLOCKS_FILES)
	@echo "<Validating database>" 1>&2
	@$(JING) -c schemas/ipam.rnc ipam.xml
	@umask 002; echo `id -u -n` > $@

.networks-auto-include: $(NETWORKS_DIRS)
	@umask 002; \
	set -e; \
	echo "<Generating automatic includes in file $@>"; \
	echo "<!-- Automatically generated file.  DO NOT EDIT. -->" > $@; \
	echo "<networks xmlns:xi=\"http://www.w3.org/2001/XInclude\">" >>$@; \
	for file in $(NETWORKS_FILES); do \
		echo "  <xi:include href=\"$$file\"/>" >>$@; \
	done; \
	echo "</networks>" >>$@

dump: validate
	$(DUMP) ipam.xml

cache: .ipam.cache

.ipam.cache: validate
	@umask 002; \
	set -e; \
	echo "<Rebuilding cache file $(CURDIR)/$@>" 1>&2; \
	[ -f $@.lock ] && \
	  { user=`stat --format="%U" $@.lock`; \
	    echo "Cache is being rebuilt by user $$user, retry later"; \
	    exit 1; }; \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f $@.lock; \
	}; \
	trap cleanup INT TERM EXIT; \
	touch $@.lock; \
	$(SERIALIZE) $@; \
	if [ `stat --format="%a" $@` != 664 ]; then \
		chmod 664 $@; \
	fi

### Show the differences of all currently checked-out files which have
### been modified since the last successful validation.
diff:
	@$(FIND) . -name "*.xml" -newer validate -exec rcsdiff -u {} \;

### Generate zone file snippets and rebuild the zones.  The snippets
### are written to a local directory and compared to the d.ipam files
### currently installed in the proper zone directories.  The newly
### generated files are installed only if they differ from the old ones
### to avoid building the zone unnecessarily.
zones: validate zones/.links.stamp
	@umask 002; \
	set -e; \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f zones/*new; \
	}; \
	trap cleanup INT TERM EXIT; \
	$(GEN-ZONES) --suffix=new; \
	for file in zones/*; do \
		[ -f $$file -a -f $${file}new ] || continue; \
		[ -h $${file}install ] || continue; \
		dest=`readlink $${file}install`; \
		[ -f $$dest ] || touch $$dest; \
		if ! $(DIFF) $$file $${file}new >/dev/null; then \
			mv $${file}new $$file; \
			rm -f $$dest.old; \
			mv $$dest $$dest.old; \
			cp $$file $$dest; \
			dir=`dirname $$dest`; \
			[ -f $$dir/Makefile ] && (cd $$dir && make); \
		else \
			echo No changes in `basename $$file`; \
		fi; \
	done; \
	touch $@

### The zone snippets are written to the directory "zones" within the
### IPAM.  Each zone has associated with it a symbolic link named
### zones/<zone>.install, which points to the actual d.ipam file in
### the proper zone directory.
zones/.links.stamp: zones.xml
	@umask 002; \
	set -e; \
	rm -f zones/*; \
	$(GEN-ZONES) --conf | while read zone dir; do \
		ln -s $$dir/d.ipam zones/$${zone}install; \
	done; \
	touch $@
