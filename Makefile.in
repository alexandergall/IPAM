export IPAM_BASE = @@IPAM_BASE@@

PATH = /bin:/usr/bin:$(IPAM_BASE)/bin
SHELL = /bin/bash

JING = java -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration -jar /usr/share/java/jing.jar
FIND = find
GEN-ZONES = ipam-gen-zones
SERIALIZE = ipam-create-cache
DUMP = xmllint --xinclude
DIFF = diff
DATE = date --rfc-3339=seconds
MD5 = md5sum

CONFIRM = y
comma = ,

### Whenever the database is unlocked, it us dumped into
### this RCS-controlled file to provide something like a
### transaction-based history of the entire database.
IPAM_ARCHIVE := ipam_archive
IPAM_ARCHIVE_RCS := RCS/$(IPAM_ARCHIVE),v

### Files that contain <networks> tags.  Used as prerequisites for
### validate and construction of automatic includes.
NETWORKS_DIRS := $(wildcard net-*/networks)
NETWORKS_FILES = $(call FIND_XML_FILES,$(NETWORKS_DIRS))

### Files that contain parts of the address map.  Used as
### prerequisites for validate.
BLOCKS_DIRS := $(wildcard net-*/blocks-*)
BLOCKS_FILES = $(call FIND_XML_FILES,$(BLOCKS_DIRS))

.DEFAULT_GOAL = zones

#### Macro definitions

### Find all regular files in the given path with names
### ending in .xml
define FIND_XML_FILES
$(if $(1),$(filter-out %/schemas.xml,$(shell $(FIND) $(1) -type f -name "*.xml")))
endef

define log
	echo "$(1) $(2)" 1>&2
endef

### Write a string to stderr, prefixed with "==> "
define msg
$(call log,==>,$(1))
endef

### Write a string to stderr, prefixed with "!!> "
define err
$(call log,!!>,$(1))
endef

### Return the name of the user's effective UID
define self
`id -un`
endef

### Return the user name of the owner of the given file
define owner_of
`stat --format="%U" $(1)`
endef

### When called without argument, return a zero exit status if
### the lock file exists, non-zero otherwise.  If called with
### an argument, it is also checked whether the lock file is
### owned by the given user.
define locked_p
[ -f .lock ] && \
	if [ -n "$(1)" ]; then \
		[ $(call owner_of,.lock) == $(call self) ]; \
	else \
		true; \
	fi
endef 

### Return a zero exit status if the lock file exists and
### is owned by the user.
define locked_by_self_p
$(call locked_p,$(call self))
endef

### Exit with status 1 unless the the lock file exists and is
### owned by the user.
define fail_unless_locked_by_self
$(call locked_by_self_p) || \
	{ $(call err,The database must be locked by you to perform this operation.); \
	  $(call msg,Use 'make lock' to acquire the lock.); \
	  exit 1; }
endef

#### Target definitions

### Generate includes for files that contain network definitions.  A
### file can be excluded by creating a file with '.no-auto-include'
### appended to the name in the same directory.  To detect when this
### target needs to be remade is a bit tricky.  Naively, we only need
### to use all directories that contain these files as prerequisites,
### because the mtime of the directory is updated when files are added
### or deleted.  However, there are lots of false positives due to RCS
### checkin/checkouts or the manipulation of editor backup files.  So,
### instead of making .networks-auto-include itself a prerequisite of
### the validate target, we use the MD5 mechanism just like with the
### other prerequisites of validate.
.networks-auto-include: $(NETWORKS_DIRS) $(BLOCKS_DIRS)
	@umask 002; \
	set -e; \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f $@.new; \
	}; \
	trap cleanup INT TERM EXIT; \
	echo "<!-- Automatically generated file.  DO NOT EDIT. -->" > $@.new; \
	echo "<networks xmlns:xi=\"http://www.w3.org/2001/XInclude\">" >>$@.new; \
	for file in $(NETWORKS_FILES); do \
		[ -f $${file}.no-auto-include ] || \
			echo "  <xi:include href=\"$$file\"/>" >>$@.new; \
	done; \
	echo "</networks>" >>$@.new; \
	mv $@.new $@

### Validate ipam.xml aginst the schema.  It appears that only James Clark
### is able to write a working RelaxNG vlaidator :(  The validator based on
### libxml2 is buggy, which makes XML::LibXML::RelaxNG unusable as well.
### For now, we perform validation outside of the IPAM Perl module using
### jing.

### While jing is great at validation, it doesn't produce particularly useful
### error messages if the document is not well-formed and the error is in a
### file that is XIncluded.  xmllint is better in this respect so we
### unconditionally run it on the file when jing has failed (it does not
### produce any output if the document isn't well-formed).

### We use a slightly more elaborate mechanism to detect changes, or,
### rather, non-changes for some of the prerequisites.  The problem is
### that an RCS cechkout followed by a chekin without actual changes
### still modifies the mtime timestamp of the file, which causes the
### validate target (and all targets depending on it) to have to be
### remade, which is a bit annoying.  To solve this problem, we use
### the MD5 hash of the files to detect actual changes instead.

### The MD5 sum of a file is stored in a subdirectory to avoid
### cluttering up the original directory with lots of files.  The name
### of this file is the same as that on which it depends with the
### suffix ".md5" added.  It is this file that is used as prerequisite
### for validate rather than the original file.  A pattern rule is
### used to rebuild this file when the original file was changed.  The
### magic lies in the recipe of this pattern rule, which updates the
### .md5 file only if the MD5 hash has actually changed.

### Unfortunately, this trick breaks the logic of the targets
### cache-maybe-rebuild and info that try to detect pending changes by
### using "make -q", because "-q" does not execute any recipes (and
### hence bypasses the magic of the .md5 pattern rule).  This can be
### fixed by adding two more things.  One thing is to remove the
### prerequisite of the pattern rule %.md5 when "make -q" is used.
### This is accomplished by unsetting the variable REBUILD_MD5 (which
### is set by default).  The other thing is to execute the original
### pattern rule separately to still update the MD5 sums, which is done
### with a separate rule used only for this purpose.  The entire
### procedure then looks like "make update-md5 && make -q <whatever>".

### This macro completes with an exit status of 0 if the given 
### target needs to be remade, >0 otherwise
define needs_update_p
! { $(MAKE) --silent update-md5 && $(MAKE) -q $(1) REBUILD_MD5=; }
endef

VALIDATE_PREREQS := .networks-auto-include ipam.xml alternatives.xml address-map.xml zones.xml iid.xml $(NETWORKS_FILES) $(BLOCKS_FILES)
VALIDATE_PREREQS_MD5 := $(foreach file,$(VALIDATE_PREREQS),$(dir $(file))md5/$(addsuffix .md5,$(notdir $(file))))

REBUILD_MD5 = 1

### This template is used to create a pattern rule for md5 files for
### each directory that contains prerequisites for validate.  This is
### necessary because the md5 files live in subdirectories and this
### dependency cannot be expressed by a regular pattern rule.

### Note: the checksum is calculated only once when the $(eval) clause
### is expanded by make.  The recipe of the target is emtpy unless the
### checksum has actually changed.

### For efficiency, checksums are only actually calculated if the file
### is newer than it's .md5 file.  If many files have been touched
### without actual changes, the number of MD5 calculations that need
### to be done for each invocation of make increases unnecessarily.
### The list of these files can be shown by building the target
### "show-regen-md5".  The target "regen-md5" regenerates the files.
define MD5_template
$(1)/md5/%.md5: $$(if $$(REBUILD_MD5),$(dir)/%)
	$$(eval CHECKSUM := $$(shell $(MD5) $$<))
	$$(if $$(filter-out $$(shell cat $$@ 2>/dev/null),$$(CHECKSUM)),\
		@umask 002; \
		[ -d $(1)/md5 ] || mkdir $(1)/md5; \
		echo $$(CHECKSUM) > $$@ \
,\
		$$(if $$(REGEN_MD5),\
			$$(if $$(REGEN_MD5_SHOW),\
				@echo "$$@" \
,\
				@echo "Regenerating $$@."; \
				$(MD5) $$< > $$@ \
			)\
		)\
	)
endef

$(foreach dir,. $(NETWORKS_DIRS) $(BLOCKS_DIRS),$(eval $(call MD5_template,$(dir))))

update-md5: $(VALIDATE_PREREQS_MD5)
regen-md5: REGEN_MD5 := 1
regen-md5: update-md5
show-regen-md5: REGEN_MD5_SHOW := 1
show-regen-md5: regen-md5 

validate: $(VALIDATE_PREREQS_MD5)
	@umask 002; \
	set -e; \
	$(call msg,Validating database.); \
	$(call fail_unless_locked_by_self); \
	if ! $(JING) -c schemas/ipam.rnc ipam.xml; then \
		$(DUMP) --noout ipam.xml; \
		exit 1; \
	fi; \
	echo $(call self) > $@

### Dump the database as a single XML file.  This can fail
### if the database requires validation and the user doesn't
### own the lock.
dump: validate
	@$(DUMP) ipam.xml

### Dump the newest version from the archive.  This will always
### succeed.
dump-from-archive:
	@co -p $(IPAM_ARCHIVE) 2>/dev/null

### Create a cache of the database by serializing the Perl IPAM
### object.  This is only allowed when the user is holding the lock.
### The ipam-* commands always operate on the cache (but see the
### comment of the target cache-maybe-rebuild for more details), never
### on the database itself.  This way, lookups do not interfere with
### pending changes when the database is locked and being edited by
### somebody.  The target "cache" is an alias for ".ipam.cache".
cache: .ipam.cache
.ipam.cache: validate
	@umask 002; \
	set -e; \
	$(call msg,Rebuilding cache.); \
	$(call fail_unless_locked_by_self); \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f $@.new; \
	}; \
	trap cleanup INT TERM EXIT; \
	touch $@.new; \
	$(SERIALIZE) $@.new; \
	if [ `stat --format="%a" $@.new` != 664 ]; then \
		chmod 664 $@.new; \
	fi; \
	mv $@.new $@

### This target is built by regular ipam-* commands before they try to
### access the cache. It checks whether the target "cache" is up to
### date.  If it is, no output is generated and make exits with status
### zero.  Otherwise, there are three possible outcomes.

###  1. If the database is locked by the user, the cache is rebuilt.
###  2. If the database is locked by a different user, the cache
###     is not updated and make exists with status zero.  It is assumed
###     that a regular edit is in progress and the cache will eventually
###     be rebuilt by the user holding the lock. The calling ipam-* 
###     command uses the old cache.
###  3. If the database is not locked but the cache is not up to date,
###     something has gone wrong during the last lock/unlock cycle and a
###     message is displayed to alert the user.
cache-maybe-rebuild:
	@set -e; \
	if $(call needs_update_p,cache); then \
		if $(call locked_by_self_p); then \
			$(MAKE) cache; \
		elif ! $(call locked_p); then \
			$(call err,Cache needs to be rebuilt but the database is unlocked.); \
			$(call msg,Use 'make info' for details.); \
			exit 0; \
		fi; \
	fi

### Show the differences of all currently checked-out files which have
### been modified since the last successful validation.
diff:
	@[ -f validate ] || exit 0; \
	for f in $(call FIND_XML_FILES,. -newer validate); do \
		out=`rcsdiff -u $$f 2>&1`; \
		[ $$? -gt 0 ] && total="$$total$$out"; \
	done; \
	[ -n "$$total" ] && echo "$$total" || true

### Show files that are locked by RCS
LOCKER =
show-rcs-locks:
	@for d in `find . -type d -name RCS`; do\
		rlog -L -R $(LOCKER) $$d/*;\
	done | while read rcsfile; do\
		set -- `rlog -l $$rcsfile | grep -A1 '^locks' | tail -1 | cut -d: --output-delimiter=' ' -f1,2`;\
		echo `echo $$rcsfile | sed -e 's/RCS\///;s/,v$$//;s/\.\///'` "locked by user $$1 (revision $$2)";\
	done

### Show only the user's own RCS locks
show-my-rcs-locks:
	@$(MAKE) --silent show-rcs-locks LOCKER="-l$(USER)"

### Display information about the current state of the database.
info:
	@set -e; \
	[ -z "$(INFO_NO_SHOW_LOCK)" ] && $(MAKE) --silent show-lock || true; \
	rcs_locks=`$(MAKE) --silent show-rcs-locks`; \
	if [ -n "$$rcs_locks" ]; then \
		$(call err,There are RCS locks on the following files:); \
		echo "$$rcs_locks"; \
	fi; \
	if $(call needs_update_p,validate); then \
		$(call err,The database has not been validated after the last modification. Use 'make' or 'make validate' to fix.); \
		if [ -f validate ]; then \
			for md5 in $(VALIDATE_PREREQS_MD5); do \
				[ $$md5 -nt validate ] && \
					files="$$files`basename $$md5 .md5`\n"; \
			done; \
		fi; \
		if [ -n "$$files" ]; then \
			$(call msg,The following files contain pending changes:); \
			echo -e "$$files"; \
		fi; \
		diff=`$(MAKE) --silent diff 2>&1` || true; \
		if [ -n "$$diff" ]; then \
			$(call msg,The following changes are not yet commited to RCS:); \
			echo; \
			echo "$$diff"; \
		fi; \
	fi; \
	if $(call needs_update_p,.ipam.cache); then \
		$(call err,The IPAM cache needs to be rebuilt. Use 'make' or 'make cache' to fix.); \
	fi; \
	if $(call needs_update_p,zones); then \
		$(call err,The DNS zones need to be updated. Use 'make' to fix.); \
	fi

### Try to lock the database.  This will fail if either the database is
### already locked by somebody else or if it is not in a clean state.
lock:
	@[ -f .lock ] && \
		{ locker="$(call owner_of,.lock)"; \
		  [ $$locker == $(call self) ] && locker="you"; \
		  $(call msg,Already locked by $$locker.); \
		  if [ -s .lock ]; then \
		  	echo -n "Reason: "; \
			cat .lock; \
		  fi; \
		  exit 1; }; \
	$(MAKE) --silent .lock

### Lock the database even when it is not clean
lock-force: export LOCK_FORCE=y
lock-force: lock

### Let the locker deposite a message that is displayed to
### users trying to lock the database when it is already locked.
lock-msg: export LOCK_MSG=1
lock-msg: lock

.lock:
	@umask 002; \
	set -e; \
	status=`$(MAKE) --silent info INFO_NO_SHOW_LOCK=y 2>&1`; \
	if [ -n "$$status" -a -z "$(LOCK_FORCE)" ]; then \
		$(call err,The database is unlocked but it is not in a clean state.  Use 'make info' for more details.); \
		$(call msg,Try to clear this condition or use 'make lock-force' to obtain the lock.); \
		$(call msg,Use 'make lock-history' to review the latest locking/unlocking operations.); \
		exit 1; \
	fi; \
	cleanup() { \
		trap - INT TERM EXIT; \
		$(call msg,Abortet. Lock has not been set.); \
		rm -f $@; \
	}; \
	trap cleanup INT TERM EXIT; \
	touch $@; \
	$(call msg,The database is now locked by you.); \
	if [ -n "$(LOCK_MSG)" ]; then \
		$(call msg,Please provide a brief message that will be displayed to other users when they attempt to acquire the lock while you own it.); \
		$(call msg,Type CTRL-d to commit$(comma) CTRL-c to abort.); \
		cat >$@; \
	fi; \
	if [ ! -f $(IPAM_ARCHIVE_RCS) ]; then \
		$(call msg,Initializing IPAM archive.); \
		$(MAKE) --silent dump >$(IPAM_ARCHIVE); \
		ci -t-"IPAM archive" $(IPAM_ARCHIVE); \
	fi; \
	trap - INT TERM EXIT; \
	mode="L"; \
	[ -n "$(LOCK_FORCE)" ] && mode="F"; \
	echo "`$(DATE)` $$mode `id -un`" >>.lock-history; \

### Steal the lock from a another user.  This effectively forces an
### unlock followed by a lock for the current user.
lock-steal:
	@umask 002; \
	set -e; \
	if [ ! -f .lock ]; then \
		$(call msg,The database is not locked.); \
		exit 1; \
	fi; \
	locker=$(call owner_of,.lock); \
	self=$(call self); \
	if [ $$locker == $$self ]; then \
		$(call msg,You already own the lock.); \
		exit 1; \
	fi; \
	$(call msg,Stealing the lock from $$locker.); \
	echo "`$(DATE)` U $$self $$locker" >>.lock-history; \
	echo "`$(DATE)` L $$self" >>.lock-history; \
	rm -f .lock; \
	touch .lock

### Unlock the database.  This only succeeds if

###   - All files are checked in
###   - The database is valid
###   - The cache has been rebuilt
###   - The DNS has been updated

### The database is considered to be clean if all conditions are met.
### In that case, a dump of the database is checked into the archive
### to provide a sort of transaction-level change log of the entire
### database.  The RCS version is bumped even if the database hasn't
### changed in order to reflect every unlock operation in the RCS log
### of the archive.
unlock:
	@set -e; \
	[ -f .lock ] || \
		{ $(call msg,The database is not locked.); \
		  exit 1; }; \
	locker="$(call owner_of,.lock)"; \
	self="$(call self)"; \
	if [ $$locker == $$self ]; then \
		status=`$(MAKE) --silent info INFO_NO_SHOW_LOCK=y 2>&1`; \
		if [ -n "$$status" ]; then \
			$(call err,The lock cannot be removed unless the IPAM is in a clean state.); \
			$(call msg,Use 'make info' for more details.); \
			exit 1; \
		fi; \
		$(call msg,Updating IPAM archive.); \
		lock_history="`$(DATE)` U $$self $$locker"; \
		co -l $(IPAM_ARCHIVE); \
		$(MAKE) --silent dump >$(IPAM_ARCHIVE); \
		ci -f -m"$$lock_history" $(IPAM_ARCHIVE); \
		echo "$$lock_history" >>.lock-history; \
		rm -f .lock; \
		$(call msg,The database is now unlocked.); \
	else \
		$(call msg,The lock is owned by user $$locker.); \
	fi

### Show the diffs between two consecutive versions in the archive and
### the log message of the newer of the two versions.  This allows to
### review the changes for each transaction. The stem of this pattern
### rule is used as an index relative to the current version, i.e. 0
### is the current version representing the most recent transaction, 1
### is the penultimate transaction etc.
transaction-%:
	@set -e; \
	set -- `rlog -h ipam_archive | awk '$$1 == "head:" { split($$2,out,/\./); print out[1], out[2]}'`; \
	trunk=$$1; \
	head=$$2; \
	echo $* | egrep '^[0-9]+$$' >/dev/null || \
		{ $(call err,Index \"$*\" not numeric.); \
		  exit 1; \
		}; \
	v1=$$(($$head - $*)); \
	v2=$$(($$v1 - 1)); \
	if  [ $$v1 -gt 0 -a $$v2 -gt 0 ] ; then \
		r1=$$trunk.$$v1; \
		r2=$$trunk.$$v2; \
		rcsdiff -u -r$$r2 -r$$r1 $(IPAM_ARCHIVE) || true; \
		rlog -r$$r1 $(IPAM_ARCHIVE) | awk '/^-----/,/^=====/'; \
	else \
		$(call err,Index $* out of range (max: $$(($$head-2)))); \
		exit 1; \
	fi

### Show the last few entries of the lock history.
LOCK_HISTORY = 10
lock-history:
	@[ -f .lock-history ] || \
		{ $(call msg,Lock history not available.); \
		  exit 1; }; \
	tail -$(LOCK_HISTORY) .lock-history | while read date time mode user owner; do \
		echo -n $$date $$time; \
		if [ "$$mode" == "L" ]; then \
			echo " locked by $$user"; \
		elif [ "$$mode" == "F" ]; then \
			echo " forced lock by $$user"; \
		elif [ "$$user" == "$$owner" ]; then \
			echo " unlocked by $$user"; \
		else \
			echo " lock stolen from $$owner by $$user"; \
		fi; \
	done

show-lock:
	@set -e; \
	if [ -f .lock ]; then \
		user="$(call owner_of,.lock)"; \
		$(call msg,The database is locked by user $$user.); \
		if [ -s .lock ]; then \
		  	echo -n "Reason: "; \
			cat .lock; \
		fi; \
	else \
		$(call msg,The database is unlocked.); \
	fi

### Generate zone file snippets and rebuild the zones.  The snippets
### are written to a local directory and compared to the d.ipam files
### currently installed in the proper zone directories.  The newly
### generated files are installed only if they differ from the old ones
### to avoid building the zone unnecessarily.
zones: zones/.stamp
zones/.stamp: .ipam.cache zones/.links.stamp
	@umask 002; \
	set -e; \
	$(call msg,Generating zone files.); \
	$(call fail_unless_locked_by_self); \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f zones/*new; \
		rm -f zones/diffs; \
	}; \
	trap cleanup INT TERM EXIT; \
	$(GEN-ZONES) --suffix=new; \
	$(call msg,Detecting zones that need to be updated.); \
	for file_n in `$(FIND) zones -name "*new"`; do \
		file=`echo $$file_n | sed -e 's/new$$//'`; \
		zone=`basename $$file`; \
		if [ ! -f $$file ]; then \
			$(call msg,Rebuilding missing zone file $$file); \
			if [ -f $${file}install ]; then \
				 cp $${file}install $$file; \
			else \
				[ -h $${file}install ] || \
					$(call msg,Zone $$zone (file $$file) requires manual update on the name server.); \
				cp $$file_n $$file; \
			fi; \
		fi; \
		if ! $(DIFF) --unified=5 $$file $$file_n >zones/diffs; then \
			files="$$files $$file"; \
			$(call msg,Changes in zone $$zone:); \
			echo; \
			cat zones/diffs; \
			echo; \
		fi; \
	done; \
	if [ -n "$$files" ]; then \
		if [ "$(CONFIRM)" == "y" ]; then \
			while true; do \
				read -N1 -s -p 'Press "c" to confirm these changes or "a" to abort.' ans; \
				case $$ans in \
					[cC] ) echo; break;; \
					[aA] ) echo; $(call msg,Aborted.  No changes have been made to the DNS.); exit 1;; \
				esac; \
				echo; \
			done; \
		fi; \
		$(call msg,Committing changes to the DNS); \
		for file in $$files; do \
			rm -f $$file; \
			mv $${file}new $$file; \
			if [ ! -h $${file}install ]; then \
				zone=`basename $$file`; \
				$(call msg,Zone $$zone (file $$file) requires manual update on the name server.); \
				continue; \
			fi; \
			dest=`readlink $${file}install`; \
			[ -f $$dest ] || touch $$dest; \
			rm -f $$dest.old; \
			mv $$dest $$dest.old; \
			cp $$file $$dest; \
			dir=`dirname $$dest`; \
			if [ -f $$dir/Makefile ]; then \
				(cd $$dir && make); \
			else \
				$(call msg,Skipping $$dir: Makefile missing.); \
			fi; \
		done; \
	fi; \
	touch $@

### The zone snippets are written to the directory "zones" within the
### IPAM.  Each zone has associated with it a symbolic link named
### zones/<zone>.install, which points to the actual d.ipam file in
### the proper zone directory.
zones/.links.stamp: md5/zones.xml.md5
	@umask 002; \
	set -o pipefail; \
	set -e; \
	cleanup() { \
		rm -rf zones.new; \
	}; \
	trap cleanup INT TERM EXIT; \
	mkdir zones.new; \
	$(GEN-ZONES) --conf | while read zone dir; do \
		[ -n "$$dir" ] && ln -s $$dir/d.ipam zones.new/$${zone}install; \
		[ -f zones/$$zone ] && cp -p zones/$$zone zones.new || true; \
	done; \
	mv zones zones.old; \
	mv zones.new zones; \
	rm -rf zones.old; \
	touch $@
