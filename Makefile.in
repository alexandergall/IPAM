export IPAM_BASE = @@IPAM_BASE@@

PATH = /bin:/usr/bin:$(IPAM_BASE)/bin
SHELL = /bin/bash

JING = java -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration -jar /usr/share/java/jing.jar
FIND = find
GEN-ZONES = ipam-gen-zones
SERIALIZE = ipam-create-cache
DUMP = xmllint --xinclude
DIFF = diff

CONFIRM = y

define FIND_XML_FILES
	$(filter-out %/schemas.xml, $(shell $(FIND) $(1) -type f -name "*.xml"))
endef

### Directories and files that contain <networks> tags.
### Used as prerequisites for validate and construction
### of automatic includes.
NETWORKS_DIRS := $(wildcard networks net-*/networks)
NETWORKS_FILES := $(call FIND_XML_FILES,$(NETWORKS_DIRS))
### Directories and files that contain parts of the
### address map.  Used as prerequisites for validate.
BLOCKS_DIRS := $(wildcard net-*/blocks-*)
BLOCKS_FILES := $(call FIND_XML_FILES,$(BLOCKS_DIRS))

.DEFAULT_GOAL = zones

### Validate ipam.xml aginst the schema.  It appears that only James Clark
### is able to write a working RelaxNG vlaidator :(  The validator based on
### libxml2 is buggy, which makes XML::LibXML::RelaxNG unusable as well.
### For now, we perform validation outside of the IPAM Perl module using
### jing.
### While jing is great at validation, it doesn't produce particularly useful
### error messages if the document is not well-formed and the error is in a
### file that is XIncluded.  xmllint is better in this respect so we
### unconditionally run it on the file when jing has failed (it does not
### produce any output if the document is well-formed).
validate: .networks-auto-include ipam.xml alternatives.xml address-map.xml iid.xml zones.xml $(NETWORKS_FILES) $(BLOCKS_FILES)
	@echo "<Validating database>" 1>&2
	@set +e; \
	if ! $(JING) -c schemas/ipam.rnc ipam.xml; then \
		$(DUMP) --noout ipam.xml; \
		exit 1; \
	fi
	@umask 002; echo `id -u -n` > $@

.networks-auto-include: $(NETWORKS_DIRS)
	@umask 002; \
	set -e; \
	echo "<Generating automatic includes in file $@>"; \
	echo "<!-- Automatically generated file.  DO NOT EDIT. -->" > $@; \
	echo "<networks xmlns:xi=\"http://www.w3.org/2001/XInclude\">" >>$@; \
	for file in $(NETWORKS_FILES); do \
		[ -f $${file}.no-auto-include ] || \
			echo "  <xi:include href=\"$$file\"/>" >>$@; \
	done; \
	echo "</networks>" >>$@

dump: validate
	$(DUMP) ipam.xml

cache: .ipam.cache

.ipam.cache: validate
	@umask 002; \
	set -e; \
	echo "<Rebuilding cache file $(CURDIR)/$@>" 1>&2; \
	[ -f $@.lock ] && \
	  { user=`stat --format="%U" $@.lock`; \
	    echo "Cache is being rebuilt by user $$user, retry later"; \
	    exit 1; }; \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f $@.lock; \
	}; \
	trap cleanup INT TERM EXIT; \
	touch $@.lock; \
	$(SERIALIZE) $@; \
	if [ `stat --format="%a" $@` != 664 ]; then \
		chmod 664 $@; \
	fi

### Show the differences of all currently checked-out files which have
### been modified since the last successful validation.
diff:
	@$(FIND) . -name "*.xml" -newer validate -exec rcsdiff -u {} \;

lock-dns:
	@umask 002; \
	set -e; \
	[ -f .dns-lock ] && \
		{ user=`stat --format="%U" .dns-lock`; \
		  echo "Already locked by user $$user."; \
		  if [ -s .dns-lock ]; then \
		  	echo "Reason:"; \
			cat .dns-lock; \
		  else \
			echo "No reason given."; \
		  fi; \
		  exit 1; }; \
	$(MAKE) --silent .dns-lock

unlock-dns:
	@set -e; \
	[ -f .dns-lock ] || \
		{ echo "No lock has been set."; \
		  exit 1; }; \
	user=`stat --format="%U" .dns-lock`; \
	if [ $$user == `id -un` -o "$(FORCE)" == "y" ]; then \
		rm -f .dns-lock; \
		echo "The DNS lock has been succefully removed."; \
	else \
		echo "The lock is owned by user $$user."; \
		echo 'Use "make unlock-dns FORCE=y" to override.'; \
	fi

.dns-lock:
	@umask 002; \
	set -e; \
	touch $@; \
	cleanup() { \
		trap - INT TERM EXIT; \
		echo "Abortet, lock has not been set."; \
		rm -f $@; \
	}; \
	trap cleanup INT TERM EXIT; \
	echo "Locking out changes to the DNS."; \
	echo "Please give a brief description of the reason, type CTRL-D to commit"; \
	cat >$@; \
	trap - INT TERM EXIT

### Generate zone file snippets and rebuild the zones.  The snippets
### are written to a local directory and compared to the d.ipam files
### currently installed in the proper zone directories.  The newly
### generated files are installed only if they differ from the old ones
### to avoid building the zone unnecessarily.
zones: zones/.stamp

zones/.stamp: validate zones/.links.stamp
	@umask 002; \
	set -e; \
	[ -f .dns-lock ] && \
		{ user=`stat --format="%U" $@`; \
		  echo "Changes to the DNS have been locked out by user $$user on `stat --format="%y" .dns-lock`."; \
		  if [ -s .dns-lock ]; then \
		  	echo "Reason:"; \
			cat .dns-lock; \
		  else \
			echo "No reason given."; \
		  fi; \
		  echo 'Use "make unlock-dns" to unlock.'; \
		  while true; do \
			read -N1 -s -p 'Would you like to review the changes that would be applied? (y/n) ' yn; \
			case $$yn in \
				[yY] ) review="y"; echo; break;; \
				[nN] ) echo; exit 1;; \
			esac; \
		  done; }; \
	cleanup() { \
		trap - INT TERM EXIT; \
		rm -f zones/*new; \
		rm -f zones/diffs; \
	}; \
	trap cleanup INT TERM EXIT; \
	$(GEN-ZONES) --suffix=new; \
	echo "<Detecting zones that need to be updated>"; \
	for file_n in `$(FIND) zones -name "*new"`; do \
		file=`echo $$file_n | sed -e 's/new$$//'`; \
		zone=`basename $$file`; \
		if [ -f $$file ]; then \
			if ! $(DIFF) --unified=5 $$file $$file_n >zones/diffs; then \
				files="$$files $$file"; \
				echo "Changes in zone $$zone:"; \
				echo; \
				cat zones/diffs; \
				echo; \
			fi; \
		fi; \
	done; \
	if [ "$$review" == "y" ]; then \
		echo "Discarding all changes due to lock."; \
		exit 1; \
	fi; \
	if [ -n "$$files" ]; then \
		if [ "$(CONFIRM)" == "y" ]; then \
			while true; do \
				read -N1 -s -p 'Press "c" to confirm these changes or "a" to abort.' ans; \
				case $$ans in \
					[cC] ) echo; break;; \
					[aA] ) echo; echo "Aborting.  No changes have been made to the DNS."; exit 1;; \
				esac; \
				echo; \
			done; \
		fi; \
		echo "<Committing changes to the DNS>"; \
		for file in $$files; do \
			rm -f $$file; \
			mv $${file}new $$file; \
			[ -h $${file}install ] || continue; \
			dest=`readlink $${file}install`; \
			[ -f $$dest ] || touch $$dest; \
			rm -f $$dest.old; \
			mv $$dest $$dest.old; \
			cp $$file $$dest; \
			dir=`dirname $$dest`; \
			if [ -f $$dir/Makefile ]; then \
				(cd $$dir && make); \
			else \
				echo "Skipping $$dir: Makefile missing."; \
			fi; \
		done; \
	fi; \
	touch $@

### The zone snippets are written to the directory "zones" within the
### IPAM.  Each zone has associated with it a symbolic link named
### zones/<zone>.install, which points to the actual d.ipam file in
### the proper zone directory.
zones/.links.stamp: zones.xml
	@umask 002; \
	set -e; \
	rm -f zones/*; \
	$(GEN-ZONES) --conf | while read zone dir; do \
		ln -s $$dir/d.ipam zones/$${zone}install; \
	done; \
	touch $@
